setwd()dir = D:\MesSauvegardes\Drive_d\insa\3if\S2\Proba
setwd("D:/MesSauvegardes/Drive_d/insa/3if/S2/Proba/TP_Part1")
# operation element par element
8*c(8,88,888,8888)+13
(x <- c(2,3,0))
(A <- cbind(c(1,8,7),c(0,1,7),c(8,4,0)))
(A <- matrix(c(1,8,7,0,1,7,8,4,0),ncol=3,nrow=3))
A[1,2]
A[1,]
A[(A>2)]
A*x
# operations matricielles
A%*%x
solve(A)%*%(A%*%x)
########################################################
# listes
L <- list(nom='toto',age=21,notes=c(14,7,12),vect=seq(1,4,by=0.5))
L$vect
str(L)
cos (pi/3)^2*sqrt(2)
a<-cos(pi/3)^2*sqrt(2)
rm(list=ls())
x<-(0,2,4)
x<-c(0,2,4)
y<-c(1,7,4)
c(x,y)
cbind(x,y)
z<-rep(4,8)
z
M<-matrix(x,2,4)
M
T<-array(x,dim=c(2,2,2))
T
x
x[â—˜2]
x[2]
M[1,4]
M[(M>2)]
M[,4]
L<-list(nom='toto',age=21, notes=c(14,7,12),vect=seq(1,4,by=0.5))
L$vect
L$nom
names(L)
str(L)
8*c(8,88,888,8888)+13
x<-c(2,3,0)
A<-cbind(c(1,8,7),c(0,1,7),c(8,4,0))
A*x
A
A%*%x
solve(A))
solve(A)
?f
help(cos)
x11()display =
x11()
rm(list=ls())
par(mfrow=c(2,3))
rm(list=ls())
x11()
par(mfrow=c(2,3))
plot(x,y,main='Titre principal',xlab='axe des x',ylab='axe des y')
x<-c(0,1,2)
y<-c(4,5,6)
plot(x,y,main='Titre principal',xlab='axe des x',ylab='axe des y')
type='1'
plot(x,y,main='Titre principal',xlab='axe des x',ylab='axe des y', type ='1')
graphics.off()
rosace <- function(a,b,absolue)
{
# le # sert a mettre des commentaires
# cette fonction sert a tracer des rosaces
theta <- seq(0,2*n*pi,0.01)
if(absolue==TRUE)
{
rho <- 1+b*abs(cos(a*theta))
}else{
rho <- 1+b*cos(a*theta)
}
return(list(angle=theta,rayon=rho))
}
res<-rosace(9/4,1,FALSE)
rosace <- function(a,b,absolue)
{
# le # sert a mettre des commentaires
# cette fonction sert a tracer des rosaces
theta <- seq(0,2*4*pi,0.01)
if(absolue==TRUE)
{
rho <- 1+b*abs(cos(a*theta))
}else{
rho <- 1+b*cos(a*theta)
}
return(list(angle=theta,rayon=rho))
}
res<-rosace(9/4,1,FALSE)
plot(res$rayon*exp(1i*res$angme,type='1'))
plot(res$rayon*exp(1i*res$angme),type='1'))
plot(res$rayon*exp(1i*res$angme),type='1')
suite <- function(a,n=100)
{
# une suite constante egale a 1
x <- 1
for(i in 1:n)
{
x <- (a+1)*x-a
}
# on ache la valeur obtenue
4
cat('valeur de x_n :', x, '\n')
}
suite(1.3)
suite(27.8)
suite(127.8)
install.packages('MASS')
library('MASS')
hemp MASS
?MASS
??MASS
library(randtoolbox)
library(rngWELL)
library(randtoolbox)
set/
---
title: "Test"
author: "KBouzid"
date: "05/05/2019"
output: html_document
---
set.seed(10)
set.seed(10)
RNGkind()
set.seed(215,kind='Mersenne-Twister')
set.seed(215)
runif(5,3)
runif(5,3)
runif(10,20)
VonNeumann <- function(n, p=1, graine)
{
x <-  rep(graine,n*p+1)
for(i in 2:(n*p+1))
{
numbers <- strsplit(format(x[i-1]^2,scientifc=FALSE),'')[[1]]
while(length(numbers)>4){
numbers <- numbers[2:(length(numbers)-1)]
}
x[i] <- as.numeric(numbers)%*%(10^seq(length(numbers)-1,0,-1))
}
x <- matrix(x[2:(n*p+1)],nrow=n,ncol=p)
return(x)
}
MersenneTwister <- function(n, p=1, graine)
{
set.seed(graine,kind='Mersenne-Twister')
x <- sample.int(2^32-1,n*p)
x <- matrix(x,nrow=n,ncol=p)
return(x)
}
binary <- function(x)
{
if((x<2^31)&(x>=0))
return( as.integer(rev(intToBits(as.integer(x)))) )
else{
if((x<2^32)&(x>0))
return( c(1,binary(x-2^31)[2:32]) )
else{
cat('Erreur dans binary : le nombre etudie n est pas un entier positif en 32 bits.\n')
return(c())
}
}
}
MersenneTwister(10,20,215)
sample.int(10,20)
